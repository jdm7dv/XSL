----------------------------------------------------
XSL to XSLT Converter Readme File
----------------------------------------------------
(c) 2000 Microsoft Corporation. All rights reserved.


The xsl-xslt-converter.xslt style sheet updates Microsoft Internet Explorer 5 XSL style sheets to XSLT-compliant style sheets.

===========
Why Update?
===========
The July 2000 Microsoft XML Parser Beta Release maintains backward compatibility with Internet Explorer 5, and existing Internet Explorer 5 XSL style sheets will continue to work. However, these style sheets are not compliant with the final World Wide Web Consortium (W3C) XSLT Recommendation, starting with the fact that XSLT uses a newer namespace. XSLT introduced a significant number of new features subsequent to the release of Internet Explorer 5, and style sheets must be updated to XSLT conformance before these features can be added.

===========================
How to Update a Style Sheet
===========================
The xsl-xslt-converter.xslt style sheet performs a number of changes:

*  Changes XSL and related namespaces

*  Adds required attributes and previously defaulted attribute values

*  Converts nested templates to modes

*  Converts <xsl:eval> and <xsl:script> blocks to an XSLT-conformant extension mechanism

*  Adds JScript implementations of XTLRuntime functions where necessary

*  Converts XSL Pattern syntax to XPath

The resulting style sheet will conform to the subset of the XSLT and XPath recommendations implemented in the Microsoft XML Technology Preview Parser but might also contain <msxsl:script> elements that will not be processed by XSLT processors from other vendors. Vendor-specific implementations of extension functions will need to be added for full interoperability.

============================
How to Convert a Style Sheet
============================
These instructions assume that the July 2000 Microsoft XML Parser Beta Release has been installed.

Step 1
------
Download the style sheet and the convert.js script file:

*  xsl-xslt-converter.xslt (XSLT-compatible)

*  convert.js

*  xsl-xslt-converter.zip (contains xsl-xslt-converter.xslt and convert.js)


Run xsl-xslt-converter.xslt on your Internet Explorer 5 XSL style sheet.

Convert.js is a Windows Scripting Host file that can be used to run xsl-xslt-converter.xslt from an MS-DOS command line:

          WScript convert.js xsl-stylesheet [output-stylesheet]

If the output-stylesheet parameter is omitted, a "t" is appended to the xsl-stylesheet parameter. For example, the following code would create a new file named "style.xslt":

WScript convert.js style.xsl 


Step 2
------
While most style-sheet transformations will be complete at this time, a number of constructs require manual intervention. The presence of these constructs will be noted in a comment at the start of the XSLT file. Update these constructs as follows:

*  ancestor method -- rewrite the expression to use the XPath ancestor axis.

*  context(n) other than context() and context(-1) -- rewrite the style sheet to declare an XSLT variable, and refer to it in the expression in place of context(n).

*  method invocation (!) -- rewrite the expression to use XPath functional syntax.

*  value method -- rewrite the expression to use number, string, boolean, and so on.

*  date method -- rewrite the style sheet to treat dates as strings.

*  $not$ -- rewrite the expression to use the not function.

*  $all$ -- rewrite the expression as an "any" expression (the default). For example, $all$ areacode = 202 becomes not(areacode != 202).

*  $ieq$, $ine$, $igt$, $ige$, $ilt$, $ile$ -- rewrite the expression to use the translate function to fold case before comparisons.

*  script functions relying on the this object implicitly (for example, text instead of this.text) -- update the script to make explicit reference to the this object, or rewrite the script function completely.


Step 3
------
You might want to optimize the resulting XSLT, reducing its size and increasing its performance, and improving its readability and maintainability. Consider:

*  Removing comments generated by xsl-xslt-converter.xslt. These are marked with the text [XSL-XSLT].

* Using attribute value templates instead of <xsl:attribute> tags where appropriate. This might improve the readability of the style sheet, but it has no functional consequence.

*  Reducing the number of calls to script by rewriting expressions to use XSLT variables and XPath built-in features and functions wherever possible. Keeping script calls to a minimum improves performance dramatically.

*  Removing unnecessary functions from the script implementation and eliminating redundant extension function declarations. This can reduce the size of the style sheet and improve compile times.

*  Replacing automatically generated mode names and extension function names with more readable names.


==========
Known Bugs
==========

Version 1.0:

*  Style sheets containing VBScript are not supported. Any script in the original file will need to be manually updated. Mixing JScript and VBScript in a single style sheet is not supported, so calls to the XTLRuntime JScript functions will not work.

*  Style sheets starting with a literal result element are not supported. Convert the style sheet to use <xsl:stylesheet> before running the transformation.

*  Some of the more esoteric format strings supplied to local:formatNumber might not work correctly. The local:formatNumber JScript implementation is intended to balance the need for handling common cases with the size and complexity needed for comprehensive compatibility. It is recommended that you update style sheets to use the XSLT formatNumber function if problems arise.

============
Future Plans
============
Future releases of this style sheet are expected to reduce the number of constructs requiring manual intervention. 
